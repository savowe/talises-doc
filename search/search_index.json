{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TALISES Documentation \u00b6 TALISES (This Ain't a LInear Schr\u00f6dinger Equation Solver) is an easy-to-use C++ implementation of the Split-Step Fourier Method, for numeric calculation of a wave function's time-propagation under the Schr\u00f6dinger equations. It's code is based on the ATUS-2 package programm developed at ZARM (Center of Applied Space Technology and Microgravity, University of Bremen). Features \u00b6 Calculation of a wavefunction's time propagation under a (non)linear Schr\u00f6dinger equation \\(\\Psi\\) may include an arbitrary number of internal and external degrees of freedom simple implementation of own Hamiltonians with time and position dependent potentials \\(V(\\Psi,r,t)\\) speed of C++ and the FFTW and GSL libaries with multithreading","title":"Home"},{"location":"#talises_documentation","text":"TALISES (This Ain't a LInear Schr\u00f6dinger Equation Solver) is an easy-to-use C++ implementation of the Split-Step Fourier Method, for numeric calculation of a wave function's time-propagation under the Schr\u00f6dinger equations. It's code is based on the ATUS-2 package programm developed at ZARM (Center of Applied Space Technology and Microgravity, University of Bremen).","title":"TALISES Documentation"},{"location":"#features","text":"Calculation of a wavefunction's time propagation under a (non)linear Schr\u00f6dinger equation \\(\\Psi\\) may include an arbitrary number of internal and external degrees of freedom simple implementation of own Hamiltonians with time and position dependent potentials \\(V(\\Psi,r,t)\\) speed of C++ and the FFTW and GSL libaries with multithreading","title":"Features"},{"location":"installation/","text":"Installing TALISES \u00b6 TALISES uses the following lbaries: FFTW for Discrete-Fourier-Transforms GSL(CBLAS) for numeric diagonalization and matrix exponentiation muParser for parsing of mathematical formulas You need this three libaries in order to use TALISES. If they are already installed on your machine, you only need to have the libary paths in your environment variables (e.g LD_LIBRARY_PATH) when you compile the program. TALISES also comes with an installation script which is written in Common Lisp, that will download the required libaries, compile them and create environment-module files. The use of environment-modules is advised. Prerequisites \u00b6 Necessary are compilers (gcc, g++), build atomation tools (make, cmake) and the Boost C++ Libraries . You can install these with sudo apt install build-essential cmake libboost-all-dev If you want to use the install script that comes with TALISES you need a Common Lisp compiler (we will use SBCL ) and environment-modules. They can be installed with sudo apt install sbcl environment-modules . After installation of environment-modules the system needs a reboot in order to work. Running the installation script \u00b6 If you downloaded the git-repository and are within the directory, you can start the installation with sbcl --script install.lisp The script will check for some dependencies e.g. compilers. If all tests pass you will be greeted by the installer. Here you have severall options to chose from. _________ __ _________ ___________ /_ __/ | / / / _/ ___// ____/ ___/ / / / /| | / / / / \\__ \\/ __/ \\__ \\ / / / ___ |/ /____/ / ___/ / /___ ___/ / /_/ /_/ |_/_____/___//____/_____//____/ Options: -h, --help Print this help text --no-fetch Skip Download --no-modules Skip Module file installation --no-install Skip Installation -j THREADS Number of make threads --build-dir DIR Build directory --install-dir DIR Installation directory --module-dir DIR Module directory What do you want to install? Press number of each package to be installed and then press ENTER: 0 - gsl (2.5) 1 - muparser (2.2.6.1) 2 - fftw (3.3.8) 3 - talises (git) a - all q - Abort Installation. The build directory will contain the source files, the installation directory the compiled binaries and the module directory the module files which will allow you to quickly switch between different environments. We recommend to install the libaries individually (first gsl, then muparser, etc.), so if something goes wrong you can easily identify the problems. When GSL, muparser and FFTW are installed you need to make sure that your environment variables point to the libary directories. Otherwise TALISES can not be compiled. Type module avail to see a list of the environment files you have. If environment-modules can find the folder you saved the modulefiles in you should see ----- /home/username/local/modules/modulefiles/ ------ fftw-3.3.8 gsl-2.5 muparser-2.2.6.1 Then you can load those configuration files with module load fftw-3.3.8 muparser-2.2.6.1 gsl-2.5 and check with echo $LD_LIBRARY_PATH whether the libaries' directories are in it. Now you can install TALISES either via the installation script or by running cmake . followed by make clean and make . If everything went right you will find the compiled binaries in the installation directory you set.","title":"Installation"},{"location":"installation/#installing_talises","text":"TALISES uses the following lbaries: FFTW for Discrete-Fourier-Transforms GSL(CBLAS) for numeric diagonalization and matrix exponentiation muParser for parsing of mathematical formulas You need this three libaries in order to use TALISES. If they are already installed on your machine, you only need to have the libary paths in your environment variables (e.g LD_LIBRARY_PATH) when you compile the program. TALISES also comes with an installation script which is written in Common Lisp, that will download the required libaries, compile them and create environment-module files. The use of environment-modules is advised.","title":"Installing TALISES"},{"location":"installation/#prerequisites","text":"Necessary are compilers (gcc, g++), build atomation tools (make, cmake) and the Boost C++ Libraries . You can install these with sudo apt install build-essential cmake libboost-all-dev If you want to use the install script that comes with TALISES you need a Common Lisp compiler (we will use SBCL ) and environment-modules. They can be installed with sudo apt install sbcl environment-modules . After installation of environment-modules the system needs a reboot in order to work.","title":"Prerequisites"},{"location":"installation/#running_the_installation_script","text":"If you downloaded the git-repository and are within the directory, you can start the installation with sbcl --script install.lisp The script will check for some dependencies e.g. compilers. If all tests pass you will be greeted by the installer. Here you have severall options to chose from. _________ __ _________ ___________ /_ __/ | / / / _/ ___// ____/ ___/ / / / /| | / / / / \\__ \\/ __/ \\__ \\ / / / ___ |/ /____/ / ___/ / /___ ___/ / /_/ /_/ |_/_____/___//____/_____//____/ Options: -h, --help Print this help text --no-fetch Skip Download --no-modules Skip Module file installation --no-install Skip Installation -j THREADS Number of make threads --build-dir DIR Build directory --install-dir DIR Installation directory --module-dir DIR Module directory What do you want to install? Press number of each package to be installed and then press ENTER: 0 - gsl (2.5) 1 - muparser (2.2.6.1) 2 - fftw (3.3.8) 3 - talises (git) a - all q - Abort Installation. The build directory will contain the source files, the installation directory the compiled binaries and the module directory the module files which will allow you to quickly switch between different environments. We recommend to install the libaries individually (first gsl, then muparser, etc.), so if something goes wrong you can easily identify the problems. When GSL, muparser and FFTW are installed you need to make sure that your environment variables point to the libary directories. Otherwise TALISES can not be compiled. Type module avail to see a list of the environment files you have. If environment-modules can find the folder you saved the modulefiles in you should see ----- /home/username/local/modules/modulefiles/ ------ fftw-3.3.8 gsl-2.5 muparser-2.2.6.1 Then you can load those configuration files with module load fftw-3.3.8 muparser-2.2.6.1 gsl-2.5 and check with echo $LD_LIBRARY_PATH whether the libaries' directories are in it. Now you can install TALISES either via the installation script or by running cmake . followed by make clean and make . If everything went right you will find the compiled binaries in the installation directory you set.","title":"Running the installation script"},{"location":"about/license/","text":"","title":"License"},{"location":"user-guide/Generating_a_wave-function/","text":"OK \u00b6 $$ \\Psi = |\\psi\\rangle $$","title":"Generating a wave-function"},{"location":"user-guide/Generating_a_wave-function/#ok","text":"$$ \\Psi = |\\psi\\rangle $$","title":"OK"},{"location":"user-guide/Handling_binary_data/","text":"","title":"Handling binary data"},{"location":"user-guide/the_xml_file/","text":"","title":"The xml file"}]}